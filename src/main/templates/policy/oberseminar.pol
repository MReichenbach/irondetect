context {

    ctxLastMinute := SLIDING = "00:01:00" and TRUSTLEVEL > 1;
    ctxWorkingHours := DATETIME > "06:00" and DATETIME < "22:00";
    ctxTrustedInfrastructureComponent := TRUSTLEVEL > 0 and DATETIME > "6:00" and DATETIME < "22:00";
    ctxIrondetect := TRUSTLEVEL > 1;
}

hint {
    
    trafficHintSmartphone := "smartphone.communication.ip.txother" "de.fhhannover.inform.trust.irondetectprocedures.TrendByValueCW" "50";
    trafficHintSnort := "ids.snort.event" "de.fhhannover.inform.trust.irondetectprocedures.Mean" "1000";
    trustTrendHint := "trend.measurement.event" "de.fhhannover.inform.trust.irondetectprocedures.Trend" "0";
}
 
anomaly {
    
    anoTrustTrend := trustTrendHint > 0.5 ctxLastMinute;
    anoHighTrafficSmartphone := trafficHintSmartphone > 0.5;
    anoHighTrafficSnort := trafficHintSnort > 0.5 ctxTrustedInfrastructureComponent;
    anoLowTrafficSmartphone := trafficHintSmartphone <= 0.5 ctxWorkingHours;

}

signature {
    sigInofficialApp := "smartphone.android.app.installer" != "com.android.vending" and "smartphone.android.app.isrunning" = "true";
    sigCamera := "smartphone.sensor.cameraisused" = "true" ctxWorkingHours;
    sigSuspiciousApp := "smartphone.android.app.permission.granted" = "android.permission.RECEIVE_BOOT_COMPLETED" and "smartphone.android.app.permission.granted" = "android.permission.CAMERA"
                        and "smartphone.android.app.permission.granted" = "android.permission.INTERNET" ctxWorkingHours;
    sigPortOpen := count ("vulnerability-scan-result.vulnerability.port") > "0" ctxTrustedInfrastructureComponent;
    sigReqForInvPres := "alert.RequestForInvestigation" = "@smartphone.device.ipaddress" ctxIrondetect;
#    sigReqForInvPres := count ("alert.RequestForInvestigation") > 0; 
}

condition {
#    conInofficialApp := sigInofficialApp;
    conInofficialApp := sigSuspiciousApp;
#    conDataLeakDetected := anoHighTrafficSmartphone and sigCamera and sigSuspiciousApp and sigPortOpen and anoHighTrafficSnort;
#    conSplitResults := anoHighTrafficSnort and anoLowTrafficSmartphone;
#    conAlertAndNegativeTrustTrend := anoTrustTrend and sigReqForInvPres;
  
}

action {

    appAlert := "alert.name" "Inofficial App Detected";
    decreaseSprAction := "trust.spr.ps" "./change-security-property.sh" "$1" "-1";
    requestForInvestigation := "RequestForInvestigation" "@smartphone.device.ipaddress";
    enforcementIsolate := "enforcement.action.isolate" "./drop-client.sh" "$1" "@smartphone.device.ipaddress";

}

rule {

    inofficalApp := if conInofficialApp do appAlert;

#    dataLeakage := if conDataLeakDetected do requestForInvestigation;
#
 #   sprChange := if conSplitResults do decreaseSprAction;

  #  dataLeakageTrust := if conAlertAndNegativeTrustTrend do enforcementIsolate;

}
